#include "universal.h"

typedef struct
{
	uint16_t CmdID;                           //?????ID
	uint8_t DMA_flag;                        //DMA???��
	uint8_t ErrorFlag;                       //???????????????��
	uint8_t Referee_count[3];                //???????????????50HZ
	uint16_t ErrorCount;                     //???????????
	uint16_t datasize;                       //DMA??????????
	
	float RealVoltage;                  //?????
	float RealCurrent;                  //??????
	float RealPower;                    //??????
	float RemainPower;                  //?????????????
	float ShootSpeed;                   //?????????
    
	uint16_t Real17mm1Heating;                    //??????
    uint16_t Real17mm2Heating;                    //??????
    uint16_t Real42mmHeating;                    //??????
	uint16_t RemainBlood;                	 	//??????
	uint16_t Shoot17mm1CoolingRate;               //?????????
	uint16_t Shoot17mm1SpeedLimit;								//???????????
	uint16_t Shoot17mm1CoolingLimit;              //???????????
    uint16_t Shoot17mm2CoolingRate;               //?????????
	uint16_t Shoot17mm2CoolingLimit;              //???????????
    uint16_t Shoot42mmCoolingRate;               //?????????
	uint16_t Shoot42mmCoolingLimit;              //???????????
	uint16_t ShootFrequency;                 //?????????
    uint16_t Bullet17RemainingNum;               //17mm????????????
    uint16_t Bullet42RemainingNum;               //42mm????????????
		
		uint16_t ChassisPowerLimit;                  //???????????
    
	uint8_t RobotID;
	uint8_t GameStartFlag;
	uint8_t RivalColor;
	uint8_t RobotLevel;
	uint16_t InjureCount;
	uint8_t InjureMark[4];
}InfantryJudge_t;


typedef union     //float????????
{  
    struct   
    {  
        unsigned char low_byte;  
        unsigned char mlow_byte;  
        unsigned char mhigh_byte;  
        unsigned char high_byte;  
     }float_byte;  
            
     float  value;  
}FLAOT_UNION; 

void Referee_Receive(void);
extern uint8_t JudgeDataBuffer[80];
extern uint8_t JudgeSendBuff[150];
extern InfantryJudge_Struct InfantryJudge;

